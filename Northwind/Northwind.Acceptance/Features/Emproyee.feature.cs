// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.0.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Northwind.Acceptance.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Emproyee")]
    public partial class EmproyeeFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Emproyee.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Emproyee", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create an Employee")]
        [NUnit.Framework.CategoryAttribute("Employee")]
        public virtual void CreateAnEmployee()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create an Employee", new string[] {
                        "Employee"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have a department", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "First Name",
                        "Gonzalo"});
            table1.AddRow(new string[] {
                        "Last Name",
                        "Alba"});
            table1.AddRow(new string[] {
                        "Employee Type",
                        "Fulltime"});
            table1.AddRow(new string[] {
                        "About",
                        "I\'m automation"});
            table1.AddRow(new string[] {
                        "Departament Name",
                        "My departament 1"});
#line 9
 testRunner.When("I create an employee using the following values:", ((string)(null)), table1, "When ");
#line 16
 testRunner.Then("it should appear in the employee grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create several Employees")]
        [NUnit.Framework.CategoryAttribute("Employee")]
        public virtual void CreateSeveralEmployees()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create several Employees", new string[] {
                        "Employee"});
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("I have a department", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "First Name",
                        "Last Name",
                        "Employee Type",
                        "About",
                        "Departament Name"});
            table2.AddRow(new string[] {
                        "Gonzalo",
                        "alba",
                        "fulltime",
                        "automation",
                        "My departament 1"});
            table2.AddRow(new string[] {
                        "employee",
                        "alba2",
                        "fulltime",
                        "automation",
                        "My departament 2"});
            table2.AddRow(new string[] {
                        "employee2",
                        "alba3",
                        "fulltime",
                        "tester",
                        "My departament 3"});
#line 21
 testRunner.When("I create several employees using the following values:", ((string)(null)), table2, "When ");
#line 26
 testRunner.Then("it should appear in the employee grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create an Employee another scenario")]
        [NUnit.Framework.CategoryAttribute("Employee")]
        public virtual void CreateAnEmployeeAnotherScenario()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create an Employee another scenario", new string[] {
                        "Employee"});
#line 29
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "Name",
                        "InfoManager.DeptoName"});
#line 30
 testRunner.Given("I have a department using the following values:", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "First Name",
                        "Gonzalo"});
            table4.AddRow(new string[] {
                        "Last Name",
                        "Alba"});
            table4.AddRow(new string[] {
                        "Employee Type",
                        "Fulltime"});
            table4.AddRow(new string[] {
                        "About",
                        "I\'m automation"});
            table4.AddRow(new string[] {
                        "Departament Name",
                        "InfoManager.DeptoName"});
#line 33
 testRunner.When("I create an employee using the following values:", ((string)(null)), table4, "When ");
#line 40
 testRunner.Then("it should appear in the employee grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create an Employee another scenario2")]
        [NUnit.Framework.CategoryAttribute("Employee")]
        public virtual void CreateAnEmployeeAnotherScenario2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create an Employee another scenario2", new string[] {
                        "Employee"});
#line 43
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "name"});
            table5.AddRow(new string[] {
                        "InfoManager.DeptoName&1"});
            table5.AddRow(new string[] {
                        "InfoManager.DeptoName&2"});
            table5.AddRow(new string[] {
                        "InfoManager.DeptoName&3"});
#line 44
 testRunner.Given("I have the following Department created:", ((string)(null)), table5, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "First Name",
                        "Last Name",
                        "Employee Type",
                        "About",
                        "Departament Name"});
            table6.AddRow(new string[] {
                        "Gonzalo",
                        "alba",
                        "fulltime",
                        "automation",
                        "InfoManager.DeptoName&1"});
            table6.AddRow(new string[] {
                        "employee",
                        "alba2",
                        "fulltime",
                        "automation",
                        "InfoManager.DeptoName&2"});
            table6.AddRow(new string[] {
                        "employee2",
                        "alba3",
                        "fulltime",
                        "tester",
                        "InfoManager.DeptoName&3"});
#line 50
 testRunner.When("I create several employees using the following values:", ((string)(null)), table6, "When ");
#line 55
 testRunner.Then("it should appear in the employee grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
